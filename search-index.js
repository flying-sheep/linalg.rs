var searchIndex = {};
searchIndex['linalg'] = {"items":[[0,"","linalg","An *experimental* linear algebra library with BLAS (*) acceleration"],[1,"Col","","Immutable view into the column of a matrix"],[1,"ColVec","","An owned column vector"],[1,"Cols","","Iterator over the columns of an immutable matrix"],[1,"Diag","","Immutable view into the diagonal of a matrix"],[1,"Items","","Immutable sub-matrix iterator"],[1,"Mat","","Owned matrix"],[1,"MutCol","","Mutable view into the column of a matrix"],[1,"MutCols","","Iterator over the columns of a mutable matrix"],[1,"MutDiag","","Immutable view into the diagonal of a matrix"],[1,"MutItems","","Mutable sub-matrix iterator"],[1,"MutRow","","Mutable view into the row of a matrix"],[1,"MutRows","","Iterator over the rows of a mutable matrix"],[1,"MutView","","Mutable sub-matrix view"],[1,"Row","","Immutable view into the row of a matrix"],[1,"RowVec","","An owned row vector"],[1,"Rows","","Iterator over the rows of an immutable matrix"],[1,"Scaled","","A lazily scaled matrix"],[1,"Trans","","View into the transpose of a matrix"],[1,"View","","Immutable sub-matrix view"],[2,"Error","","Errors"],[12,"InvalidSlice","","Invalid slice range, usually: `start > end`",0],[12,"LengthOverflow","","Attempted to allocate a matrix bigger that `uint::MAX`",0],[12,"NoSuchColumn","","Attempted to index a non-existent column, i.e. `col >= ncols`",0],[12,"NoSuchDiagonal","","Attempted to index a non-existent diagonal",0],[12,"NoSuchRow","","Attempted to index a non-existent row, i.e. `row >= nrows`",0],[12,"OutOfBounds","","Attempted to index an element outside of the bounds of the matrix",0],[10,"add","","",1],[10,"add","","",1],[10,"add","","",2],[10,"add","","",1],[10,"add","","",1],[10,"add","","",1],[10,"add","","",3],[10,"add","","",4],[10,"add","","",4],[10,"add","","",2],[10,"add","","",4],[10,"add","","",4],[10,"add","","",4],[10,"add","","",3],[10,"add","","",5],[10,"add","","",5],[10,"add","","",5],[10,"add","","",5],[10,"add","","",3],[10,"add","","",5],[10,"add","","",5],[10,"add","","",5],[10,"add","","",6],[10,"add","","",5],[10,"add","","",7],[10,"add","","",8],[10,"add","","",8],[10,"add","","",8],[10,"add","","",8],[10,"add","","",3],[10,"add","","",8],[10,"add","","",8],[10,"add","","",8],[10,"add","","",6],[10,"add","","",8],[10,"add","","",7],[10,"add","","",6],[10,"add","","",6],[10,"add","","",6],[10,"add","","",6],[10,"add","","",3],[10,"add","","",6],[10,"add","","",6],[10,"add","","",6],[10,"add","","",6],[10,"add","","",6],[10,"add","","",7],[10,"add","","",6],[10,"add","","",6],[10,"add","","",6],[10,"add","","",6],[10,"add","","",3],[10,"add","","",6],[10,"add","","",6],[10,"add","","",6],[10,"add","","",6],[10,"add","","",6],[10,"add","","",7],[10,"add","","",9],[10,"add","","",9],[10,"add","","",9],[10,"add","","",10],[10,"add","","",9],[10,"add","","",9],[10,"add","","",3],[10,"add","","",11],[10,"add","","",11],[10,"add","","",11],[10,"add","","",10],[10,"add","","",11],[10,"add","","",11],[10,"add","","",3],[10,"add_assign","","",1],[10,"add_assign","","",4],[10,"add_assign","","",12],[10,"add_assign","","",5],[10,"add_assign","","",8],[10,"add_assign","","",6],[10,"add_assign","","",6],[10,"add_assign","","",11],[10,"add_assign","","",9],[10,"add_assign","","",1],[10,"add_assign","","",1],[10,"add_assign","","",1],[10,"add_assign","","",1],[10,"add_assign","","",4],[10,"add_assign","","",4],[10,"add_assign","","",4],[10,"add_assign","","",4],[10,"add_assign","","",5],[10,"add_assign","","",5],[10,"add_assign","","",5],[10,"add_assign","","",5],[10,"add_assign","","",5],[10,"add_assign","","",5],[10,"add_assign","","",5],[10,"add_assign","","",5],[10,"add_assign","","",8],[10,"add_assign","","",8],[10,"add_assign","","",8],[10,"add_assign","","",8],[10,"add_assign","","",8],[10,"add_assign","","",8],[10,"add_assign","","",8],[10,"add_assign","","",8],[10,"add_assign","","",6],[10,"add_assign","","",6],[10,"add_assign","","",6],[10,"add_assign","","",6],[10,"add_assign","","",6],[10,"add_assign","","",6],[10,"add_assign","","",6],[10,"add_assign","","",6],[10,"add_assign","","",6],[10,"add_assign","","",6],[10,"add_assign","","",6],[10,"add_assign","","",6],[10,"add_assign","","",6],[10,"add_assign","","",6],[10,"add_assign","","",6],[10,"add_assign","","",6],[10,"add_assign","","",11],[10,"add_assign","","",11],[10,"add_assign","","",11],[10,"add_assign","","",11],[10,"add_assign","","",9],[10,"add_assign","","",9],[10,"add_assign","","",9],[10,"add_assign","","",9],[10,"at","","",2],[10,"at","","",1],[10,"at","","",13],[10,"at","","",5],[10,"at","","",4],[10,"at","","",12],[10,"at","","",11],[10,"at","","",8],[10,"at","","",10],[10,"at","","",9],[10,"at","","",7],[10,"at_mut","","",1],[10,"at_mut","","",5],[10,"at_mut","","",4],[10,"at_mut","","",12],[10,"at_mut","","",11],[10,"at_mut","","",8],[10,"at_mut","","",9],[10,"ncols","","",4],[10,"nrows","","",4],[10,"t","","",4],[10,"ncols","","",2],[10,"nrows","","",2],[10,"t","","",2],[10,"next_back","","",14],[10,"next","","",14],[10,"size_hint","","",14],[10,"next_back","","",15],[10,"next","","",15],[10,"size_hint","","",15],[10,"eq","","",2],[10,"eq","","",2],[10,"eq","","",2],[10,"eq","","",1],[10,"eq","","",1],[10,"eq","","",1],[10,"eq","","",4],[10,"eq","","",4],[10,"eq","","",4],[10,"eq","","",13],[10,"eq","","",13],[10,"eq","","",12],[10,"eq","","",12],[10,"eq","","",5],[10,"eq","","",5],[10,"eq","","",5],[10,"eq","","",5],[10,"eq","","",5],[10,"eq","","",5],[10,"eq","","",8],[10,"eq","","",8],[10,"eq","","",8],[10,"eq","","",8],[10,"eq","","",8],[10,"eq","","",8],[10,"eq","","",6],[10,"eq","","",6],[10,"eq","","",6],[10,"eq","","",6],[10,"eq","","",6],[10,"eq","","",6],[10,"eq","","",6],[10,"eq","","",6],[10,"eq","","",6],[10,"eq","","",6],[10,"eq","","",6],[10,"eq","","",6],[10,"eq","","",6],[10,"eq","","",6],[10,"eq","","",6],[10,"eq","","",6],[10,"eq","","",6],[10,"eq","","",6],[10,"eq","","",7],[10,"eq","","",7],[10,"eq","","",7],[10,"eq","","",7],[10,"eq","","",7],[10,"eq","","",7],[10,"eq","","",10],[10,"eq","","",10],[10,"eq","","",10],[10,"eq","","",9],[10,"eq","","",9],[10,"eq","","",9],[10,"eq","","",11],[10,"eq","","",11],[10,"eq","","",11],[10,"from_error","","",0],[10,"iter","","",1],[10,"iter","","",5],[10,"iter","","",9],[10,"iter","","",2],[10,"iter","","",13],[10,"iter","","",4],[10,"iter","","",12],[10,"iter","","",11],[10,"iter","","",10],[10,"iter_mut","","",1],[10,"iter_mut","","",5],[10,"iter_mut","","",9],[10,"iter_mut","","",4],[10,"iter_mut","","",12],[10,"iter_mut","","",11],[10,"ncols","","",5],[10,"nrows","","",5],[10,"unsafe_col","","",5],[10,"unsafe_col_mut","","",5],[10,"diag","","",5],[10,"diag_mut","","",5],[10,"unsafe_row","","",5],[10,"unsafe_row_mut","","",5],[10,"mul","","",6],[10,"mul","","",6],[10,"mul","","",6],[10,"mul","","",7],[10,"mul","","",7],[10,"mul","","",7],[10,"mul","","",6],[10,"mul","","",6],[10,"mul","","",6],[10,"mul","","",6],[10,"mul","","",6],[10,"mul","","",6],[10,"mul","","",7],[10,"mul","","",7],[10,"mul","","",7],[10,"mul","","",7],[10,"mul","","",7],[10,"mul","","",7],[10,"mul","","",10],[10,"mul","","",10],[10,"mul","","",10],[10,"mul","","",10],[10,"mul","","",10],[10,"mul","","",10],[10,"mul","","",10],[10,"mul","","",10],[10,"mul","","",10],[10,"ncols","","",11],[10,"nrows","","",11],[10,"t","","",11],[10,"ncols","","",10],[10,"nrows","","",10],[10,"t","","",10],[10,"next_back","","",16],[10,"next","","",16],[10,"size_hint","","",16],[10,"next_back","","",17],[10,"next","","",17],[10,"size_hint","","",17],[10,"next","","",3],[10,"next","","",3],[10,"ncols","","",3],[10,"nrows","","",3],[10,"size","","",3],[10,"mul","","",2],[10,"mul","","",6],[10,"mul","","",7],[10,"mul","","",10],[10,"mul","","",3],[10,"fmt","","",5],[10,"fmt","","",6],[10,"fmt","","",8],[10,"fmt","","",6],[10,"fmt","","",6],[10,"fmt","","",7],[10,"fmt","","",1],[10,"fmt","","",9],[10,"fmt","","",2],[10,"fmt","","",13],[10,"fmt","","",4],[10,"fmt","","",12],[10,"fmt","","",11],[10,"fmt","","",10],[10,"slice","","",1],[10,"slice_from","","",1],[10,"slice_to","","",1],[10,"slice","","",2],[10,"slice_from","","",2],[10,"slice_to","","",2],[10,"slice","","",13],[10,"slice_from","","",13],[10,"slice_to","","",13],[10,"slice","","",5],[10,"slice_from","","",5],[10,"slice_to","","",5],[10,"slice","","",4],[10,"slice_from","","",4],[10,"slice_to","","",4],[10,"slice","","",12],[10,"slice_from","","",12],[10,"slice_to","","",12],[10,"slice","","",11],[10,"slice_from","","",11],[10,"slice_to","","",11],[10,"slice","","",9],[10,"slice_from","","",9],[10,"slice_to","","",9],[10,"slice","","",10],[10,"slice_from","","",10],[10,"slice_to","","",10],[10,"slice","","",8],[10,"slice_from","","",8],[10,"slice_to","","",8],[10,"slice","","",7],[10,"slice_from","","",7],[10,"slice_to","","",7],[10,"slice_mut","","",1],[10,"slice_from_mut","","",1],[10,"slice_to_mut","","",1],[10,"slice_mut","","",5],[10,"slice_from_mut","","",5],[10,"slice_to_mut","","",5],[10,"slice_mut","","",4],[10,"slice_from_mut","","",4],[10,"slice_to_mut","","",4],[10,"slice_mut","","",12],[10,"slice_from_mut","","",12],[10,"slice_to_mut","","",12],[10,"slice_mut","","",11],[10,"slice_from_mut","","",11],[10,"slice_to_mut","","",11],[10,"slice_mut","","",8],[10,"slice_from_mut","","",8],[10,"slice_to_mut","","",8],[10,"slice_mut","","",9],[10,"slice_from_mut","","",9],[10,"slice_to_mut","","",9],[10,"sub","","",1],[10,"sub","","",1],[10,"sub","","",1],[10,"sub","","",1],[10,"sub","","",1],[10,"sub","","",4],[10,"sub","","",4],[10,"sub","","",4],[10,"sub","","",4],[10,"sub","","",4],[10,"sub","","",5],[10,"sub","","",5],[10,"sub","","",5],[10,"sub","","",5],[10,"sub","","",5],[10,"sub","","",5],[10,"sub","","",5],[10,"sub","","",5],[10,"sub","","",8],[10,"sub","","",8],[10,"sub","","",8],[10,"sub","","",8],[10,"sub","","",8],[10,"sub","","",8],[10,"sub","","",8],[10,"sub","","",8],[10,"sub","","",6],[10,"sub","","",6],[10,"sub","","",6],[10,"sub","","",6],[10,"sub","","",6],[10,"sub","","",6],[10,"sub","","",6],[10,"sub","","",6],[10,"sub","","",6],[10,"sub","","",6],[10,"sub","","",6],[10,"sub","","",6],[10,"sub","","",6],[10,"sub","","",6],[10,"sub","","",6],[10,"sub","","",6],[10,"sub","","",9],[10,"sub","","",9],[10,"sub","","",9],[10,"sub","","",9],[10,"sub","","",9],[10,"sub","","",11],[10,"sub","","",11],[10,"sub","","",11],[10,"sub","","",11],[10,"sub","","",11],[10,"sub_assign","","",1],[10,"sub_assign","","",4],[10,"sub_assign","","",12],[10,"sub_assign","","",5],[10,"sub_assign","","",8],[10,"sub_assign","","",6],[10,"sub_assign","","",6],[10,"sub_assign","","",11],[10,"sub_assign","","",9],[10,"sub_assign","","",1],[10,"sub_assign","","",1],[10,"sub_assign","","",1],[10,"sub_assign","","",1],[10,"sub_assign","","",4],[10,"sub_assign","","",4],[10,"sub_assign","","",4],[10,"sub_assign","","",4],[10,"sub_assign","","",5],[10,"sub_assign","","",5],[10,"sub_assign","","",5],[10,"sub_assign","","",5],[10,"sub_assign","","",5],[10,"sub_assign","","",5],[10,"sub_assign","","",5],[10,"sub_assign","","",5],[10,"sub_assign","","",8],[10,"sub_assign","","",8],[10,"sub_assign","","",8],[10,"sub_assign","","",8],[10,"sub_assign","","",8],[10,"sub_assign","","",8],[10,"sub_assign","","",8],[10,"sub_assign","","",8],[10,"sub_assign","","",6],[10,"sub_assign","","",6],[10,"sub_assign","","",6],[10,"sub_assign","","",6],[10,"sub_assign","","",6],[10,"sub_assign","","",6],[10,"sub_assign","","",6],[10,"sub_assign","","",6],[10,"sub_assign","","",6],[10,"sub_assign","","",6],[10,"sub_assign","","",6],[10,"sub_assign","","",6],[10,"sub_assign","","",6],[10,"sub_assign","","",6],[10,"sub_assign","","",6],[10,"sub_assign","","",6],[10,"sub_assign","","",11],[10,"sub_assign","","",11],[10,"sub_assign","","",11],[10,"sub_assign","","",11],[10,"sub_assign","","",9],[10,"sub_assign","","",9],[10,"sub_assign","","",9],[10,"sub_assign","","",9],[10,"to_owned","","",2],[10,"to_owned","","",1],[10,"to_owned","","",5],[10,"to_owned","","",4],[10,"to_owned","","",11],[10,"to_owned","","",8],[10,"to_owned","","",10],[10,"to_owned","","",9],[10,"to_owned","","",6],[10,"to_owned","","",6],[10,"to_owned","","",6],[10,"to_owned","","",7],[10,"at","","",6],[10,"at_mut","","",6],[10,"iter","","",6],[10,"iter_mut","","",6],[10,"ncols","","",6],[10,"nrows","","",6],[10,"size","","",6],[10,"col","","",6],[10,"unsafe_col","","",6],[10,"col_mut","","",6],[10,"unsafe_col_mut","","",6],[10,"diag","","",6],[10,"diag_mut","","",6],[10,"row","","",6],[10,"unsafe_row","","",6],[10,"row_mut","","",6],[10,"unsafe_row_mut","","",6],[10,"slice","","",6],[10,"slice_from","","",6],[10,"slice_to","","",6],[10,"slice_mut","","",6],[10,"slice_from_mut","","",6],[10,"slice_to_mut","","",6],[10,"t","","",5],[10,"t","","",8],[10,"t","","",7],[10,"t","","",6],[10,"next","","",18],[10,"size_hint","","",18],[10,"next","","",19],[10,"size_hint","","",19],[10,"iter_mut","","",8],[10,"unsafe_col_mut","","",8],[10,"diag_mut","","",8],[10,"unsafe_row_mut","","",8],[10,"iter","","",8],[10,"ncols","","",8],[10,"nrows","","",8],[10,"unsafe_col","","",8],[10,"diag","","",8],[10,"unsafe_row","","",8],[10,"iter","","",7],[10,"ncols","","",7],[10,"nrows","","",7],[10,"unsafe_col","","",7],[10,"diag","","",7],[10,"unsafe_row","","",7],[0,"blas","","BLAS acceleration"],[2,"Transpose","linalg::blas","Transpose matrix before operation?"],[12,"No","","Don't transpose",20],[12,"Yes","","Transpose",20],[0,"axpy","","y := alpha * x + y"],[4,"Fn","linalg::blas::axpy","The signature of `axpy`"],[6,"Axpy","","Types with `axpy` acceleration"],[9,"axpy","","Returns the foreign `axpy` function",21],[10,"axpy","complex","",22],[10,"axpy","","",22],[0,"copy","linalg::blas","y := x"],[4,"Fn","linalg::blas::copy","The signature of `copy`"],[6,"Copy","","Types with `copy` acceleration"],[9,"copy","","Returns the foreign `copy` function",23],[10,"copy","complex","",22],[10,"copy","","",22],[0,"dot","linalg::blas","dot := x^T * y"],[4,"Fn","linalg::blas::dot","The signature of `dot`"],[6,"Dot","","Types with `dot` acceleration"],[9,"dot","","Returns the foreign `dot` function",24],[0,"gemm","linalg::blas","C := alpha * A * B + beta * C"],[4,"Fn","linalg::blas::gemm","The signature of `gemm`"],[6,"Gemm","","Types with `gemm` acceleration"],[9,"gemm","","Returns the foreign `gemm` function",25],[10,"gemm","complex","",22],[10,"gemm","","",22],[0,"gemv","linalg::blas","y := alpha * A * x + beta * y"],[4,"Fn","linalg::blas::gemv","The signature of `gemv`"],[6,"Gemv","","Types with `gemv` acceleration"],[9,"gemv","","Returns the foreign `gemv` function",26],[10,"gemv","complex","",22],[10,"gemv","","",22],[4,"blasint","linalg::blas","The integer used by the BLAS library"],[0,"prelude","linalg","A collection of the most used structs and traits, meant to be glob imported"],[10,"new","complex","Create a new complex number",22],[10,"abs","","",22],[10,"acos","","",22],[10,"acosh","","",22],[10,"arg","","",22],[10,"asin","","",22],[10,"asinh","","",22],[10,"atan","","",22],[10,"atanh","","",22],[10,"cos","","",22],[10,"cosh","","",22],[10,"exp","","",22],[10,"imag","","",22],[10,"log","","",22],[10,"conj","","",22],[10,"pow","","",22],[10,"proj","","",22],[10,"real","","",22],[10,"sin","","",22],[10,"sinh","","",22],[10,"sqrt","","",22],[10,"tan","","",22],[10,"tanh","","",22],[10,"abs","","",22],[10,"acos","","",22],[10,"acosh","","",22],[10,"arg","","",22],[10,"asin","","",22],[10,"asinh","","",22],[10,"atan","","",22],[10,"atanh","","",22],[10,"cos","","",22],[10,"cosh","","",22],[10,"exp","","",22],[10,"imag","","",22],[10,"log","","",22],[10,"conj","","",22],[10,"pow","","",22],[10,"proj","","",22],[10,"real","","",22],[10,"sin","","",22],[10,"sinh","","",22],[10,"sqrt","","",22],[10,"tan","","",22],[10,"tanh","","",22],[10,"eq","","",22],[10,"ne","","",22],[10,"ne","","",22],[10,"clone","","",22],[10,"clone_from","","",22],[10,"add","","",22],[10,"add","","",22],[10,"div","","",22],[10,"div","","",22],[10,"mul","","",22],[10,"mul","","",22],[10,"neg","","",22],[10,"one","","",22],[10,"rand","","",22],[10,"fmt","","",22],[10,"sub","","",22],[10,"sub","","",22],[10,"zero","","",22],[1,"Complex","linalg::prelude","A complex number in Cartesian form."],[11,"re","","The real part",22],[11,"im","","The imaginary part",22],[4,"c64","",""],[4,"c128","",""],[0,"strided","linalg","Strided slices"],[1,"Items","linalg::strided","Iterator over an immutable strided slice"],[1,"MutItems","","Iterator over an mutable strided slice"],[10,"next_back","","",27],[10,"next","","",27],[10,"size_hint","","",27],[10,"next_back","","",28],[10,"next","","",28],[10,"size_hint","","",28],[0,"traits","linalg","Traits"],[6,"AddAssign","linalg::traits","The `+=` operator"],[9,"add_assign","","Performs the operation `self += rhs`",29],[6,"At","","Bounds-checked immutable indexing"],[9,"at","","Returns an immutable reference to the element at the given index",30],[6,"AtMut","","Bounds-checked mutable indexing"],[9,"at_mut","","Returns a mutable reference to the element at the given index",31],[6,"Iter","","Immutable iteration over a collection"],[9,"iter","","Returns an iterator that yields immutable references to the elements of the collection",32],[6,"IterMut","","Mutable iteration over a collection"],[9,"iter_mut","","Returns an iterator that yields mutable references to the elements of the collection",33],[6,"Matrix","","The basic idea of a matrix: A rectangular array arranged in rows and columns"],[10,"ncols","","Returns the number of columns the matrix has",34],[10,"nrows","","Returns the number of rows the matrix has",34],[10,"size","","Returns the size of the matrix",34],[6,"MatrixCol","","Immutable view on a column"],[10,"col","","Returns an immutable view into the column at the given index",35],[9,"unsafe_col","","Returns a view into the column at the given index without performing bounds checking",35],[6,"MatrixColMut","","Mutable access to a column"],[10,"col_mut","","Returns a mutable view into the column at the given index",36],[9,"unsafe_col_mut","","Returns a mutable view into the column at the given index without performing bounds\nchecking",36],[6,"MatrixCols","","Immutable column-by-column iteration"],[10,"cols","","Returns an iterator that yields immutable views into the columns of the matrix",37],[6,"MatrixDiag","","Immutable view on a diagonal"],[9,"diag","","Returns a view into the diagonal at the given index",38],[6,"MatrixDiagMut","","Mutable access to a diagonal"],[9,"diag_mut","","Returns a mutable view into the diagonal at the given index",39],[6,"MatrixMutCols","","Mutable column-by-column iteration"],[10,"mut_cols","","Returns an iterator that yields mutable views into the columns of the matrix",40],[6,"MatrixMutRows","","Mutable row-by-row iteration"],[10,"mut_rows","","Returns an iterator that yields mutable views into the rows of the matrix",41],[6,"MatrixRow","","Immutable view into a row"],[10,"row","","Returns an immutable view into the row at the given index",42],[9,"unsafe_row","","Returns an immutable view into the row at the given index without performing bounds\nchecking",42],[6,"MatrixRows","","Immutable row-by-row iteration"],[10,"rows","","Returns an iterator that yields immutable views into each row of the matrix",43],[6,"MatrixRowMut","","Mutable access to a row"],[10,"row_mut","","Returns a mutable view into the row at the given index",44],[9,"unsafe_row_mut","","Returns a mutable view into the row at the given index without performing bounds checking",44],[6,"MulAssign","","The `*=` operator"],[9,"mul_assign","","Performs the operation `self *= rhs`",45],[6,"Slice","","A more flexible slicing trait"],[9,"slice","","Returns an immutable view into a fraction of the collection that spans `start` : `end`",46],[9,"slice_from","","Convenience method for `slice(start, end_of_collection)`",46],[9,"slice_to","","Convenience method for `slice(start_of_collection, end)`",46],[6,"SliceMut","","Mutable version of the `Slice` trait"],[9,"slice_mut","","Returns a mutable view into a fraction of the collection that spans `start` : `end`",47],[9,"slice_from_mut","","Convenience method for `slice_mut(start, end_of_collection)`",47],[9,"slice_to_mut","","Convenience method for `slice_mut(start_of_collection, end)`",47],[6,"SubAssign","","The `-=` operator"],[9,"sub_assign","","Performs the operation `self -= rhs`",48],[6,"ToOwned","","Make an owned clone from a view"],[9,"to_owned","","Returns an owned clone from the view",49],[6,"Transpose","","The transpose operator"],[9,"t","","Returns the transpose of the input",50],[4,"Result","linalg","The result of a matrix operation"],[10,"len","","Returns the length of the column",2],[10,"new","","Creates a column vector from an existing vector",1],[10,"from_fn","","Creates a column vector and initializes each element to `f(index)`",1],[10,"sample","","Creates a column vector and fills it by sampling a random distribution",1],[10,"len","","Returns the length of the column",1],[10,"from_elem","","Constructs a column vector with copies of a value",1],[10,"rand","","Constructs a randomly initialized column vector",1],[10,"clone","","",1],[10,"len","","Returns the length of the diagonal",13],[10,"from_parts","","Creates a matrix from a owned buffer and a specified size",5],[10,"from_fn","","Creates a matrix and initializes each element to `f(index)`",5],[10,"sample","","Creates a matrix and fills it by sampling a random distribution",5],[10,"from_elem","","Constructs a matrix with copies of a value",5],[10,"rand","","Constructs a randomly initialized matrix",5],[10,"clone","","",5],[10,"len","","Returns the length of the column",4],[10,"len","","Returns the length of the diagonal",12],[10,"len","","Returns the length of the row",11],[10,"len","","Returns the length of the row",10],[10,"new","","Creates a row vector from an existing vector",9],[10,"from_fn","","Creates a row vector and initializes each element to `f(index)`",9],[10,"sample","","Creates a row vector and fills it by sampling a random distribution",9],[10,"len","","Returns the length of the row",9],[10,"from_elem","","Constructs a row vector with copies of a value",9],[10,"rand","","Constructs a randomly initialized row vector",9],[10,"clone","","",9],[10,"cols","","Returns an iterator that yields immutable views into the columns of the matrix",3],[10,"rows","","Returns an iterator that yields immutable views into each row of the matrix",3],[10,"fmt","","",0],[10,"eq","","",0],[10,"ne","","",0]],"paths":[[2,"Error"],[1,"ColVec"],[1,"Col"],[1,"Scaled"],[1,"MutCol"],[1,"Mat"],[1,"Trans"],[1,"View"],[1,"MutView"],[1,"RowVec"],[1,"Row"],[1,"MutRow"],[1,"MutDiag"],[1,"Diag"],[1,"Cols"],[1,"MutCols"],[1,"Rows"],[1,"MutRows"],[1,"Items"],[1,"MutItems"],[2,"Transpose"],[6,"Axpy"],[1,"Complex"],[6,"Copy"],[6,"Dot"],[6,"Gemm"],[6,"Gemv"],[1,"Items"],[1,"MutItems"],[6,"AddAssign"],[6,"At"],[6,"AtMut"],[6,"Iter"],[6,"IterMut"],[6,"Matrix"],[6,"MatrixCol"],[6,"MatrixColMut"],[6,"MatrixCols"],[6,"MatrixDiag"],[6,"MatrixDiagMut"],[6,"MatrixMutCols"],[6,"MatrixMutRows"],[6,"MatrixRow"],[6,"MatrixRows"],[6,"MatrixRowMut"],[6,"MulAssign"],[6,"Slice"],[6,"SliceMut"],[6,"SubAssign"],[6,"ToOwned"],[6,"Transpose"]]};
searchIndex['complex'] = {"items":[[0,"","complex","Complex numbers"],[1,"Complex","","A complex number in Cartesian form."],[11,"re","","The real part",0],[11,"im","","The imaginary part",0],[0,"f32","","Single precision"],[18,"I","complex::f32",""],[0,"f64","complex","Double precision"],[18,"I","complex::f64",""],[4,"c64","complex","Single precision complex number"],[4,"c128","","Double precision complex number"],[6,"Math","","Mathematical operations on complex numbers"],[9,"abs","","Computes the complex absolute value (also called norm, modulus or magnitude)",1],[9,"acos","","Computes the arc cosine",1],[9,"acosh","","Computes the arc hyperbolic cosine",1],[9,"arg","","Computes the argument (also called the phase angle)",1],[9,"asin","","Computes the arc sine",1],[9,"asinh","","Computes the arc hyperbolic sine",1],[9,"atan","","Computes the arc tangent",1],[9,"atanh","","Computes the arc hyperbolic tangent",1],[9,"cos","","Computes the arc cosine",1],[9,"cosh","","Computes the arc hyperbolic cosine",1],[9,"exp","","Computes the complex base-e exponential",1],[9,"imag","","Returns the imaginary part",1],[9,"log","","Computes the complex base-e logarithm",1],[9,"conj","","Computes the complex conjugate",1],[9,"pow","","Computes the complex power",1],[9,"proj","","Computes the Riemann sphere projection",1],[9,"real","","Returns the real part",1],[9,"sin","","Computes the arc sine",1],[9,"sinh","","Computes the arc hyperbolic sine",1],[9,"sqrt","","Computes the square root",1],[9,"tan","","Computes the arc tangent",1],[9,"tanh","","Computes the arc hyperbolic tangent",1],[10,"eq","","",0],[10,"ne","","",0],[10,"clone","","",0],[10,"new","","Create a new complex number",0],[10,"add","","",0],[10,"add","","",0],[10,"div","","",0],[10,"div","","",0],[10,"mul","","",0],[10,"mul","","",0],[10,"neg","","",0],[10,"one","","",0],[10,"rand","","",0],[10,"fmt","","",0],[10,"sub","","",0],[10,"sub","","",0],[10,"zero","","",0],[10,"abs","","",2],[10,"acos","","",2],[10,"acosh","","",2],[10,"arg","","",2],[10,"asin","","",2],[10,"asinh","","",2],[10,"atan","","",2],[10,"atanh","","",2],[10,"cos","","",2],[10,"cosh","","",2],[10,"exp","","",2],[10,"imag","","",2],[10,"log","","",2],[10,"conj","","",2],[10,"pow","","",2],[10,"proj","","",2],[10,"real","","",2],[10,"sin","","",2],[10,"sinh","","",2],[10,"sqrt","","",2],[10,"tan","","",2],[10,"tanh","","",2],[10,"abs","","",3],[10,"acos","","",3],[10,"acosh","","",3],[10,"arg","","",3],[10,"asin","","",3],[10,"asinh","","",3],[10,"atan","","",3],[10,"atanh","","",3],[10,"cos","","",3],[10,"cosh","","",3],[10,"exp","","",3],[10,"imag","","",3],[10,"log","","",3],[10,"conj","","",3],[10,"pow","","",3],[10,"proj","","",3],[10,"real","","",3],[10,"sin","","",3],[10,"sinh","","",3],[10,"sqrt","","",3],[10,"tan","","",3],[10,"tanh","","",3]],"paths":[[1,"Complex"],[6,"Math"],[4,"c64"],[4,"c128"]]};

searchIndex['onezero'] = {"items":[[0,"","onezero","Additive and multiplicative identities"],[6,"One","","Multiplicative identity"],[9,"one","","Returns one",0],[6,"Zero","","Additive identity"],[9,"zero","","Returns zero",1]],"paths":[[6,"One"],[6,"Zero"]]};

initSearch(searchIndex);
